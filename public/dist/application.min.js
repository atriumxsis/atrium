"use strict";var ApplicationConfiguration=function(){var applicationModuleName="ts-online-resource",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ngDialog","cgBusy"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),angular.module(ApplicationConfiguration.applicationModuleName).value("cgBusyDefaults",{message:"Mohon tunggu sebentar...",backdrop:!0,minDuration:100,templateUrl:"lib/angular-busy/angular-busy.html"}),ApplicationConfiguration.registerModule("admin-home"),ApplicationConfiguration.registerModule("core"),angular.module("core").run(["$rootScope","$state","$location","Authentication",function($rootScope,$state,$location,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState){toState.needRole&&(Authentication.user?("mustBeNotLogged"===toState.needRole&&(event.preventDefault(),$state.transitionTo("home")),"mustBeLogged"!==toState.needRole&&-1===Authentication.user.roles.indexOf(toState.needRole)&&(event.preventDefault(),$state.transitionTo("home"))):"mustBeNotLogged"!==toState.needRole&&(event.preventDefault(),$state.transitionTo("signin")))})}]),ApplicationConfiguration.registerModule("ero-client"),ApplicationConfiguration.registerModule("ero-home"),ApplicationConfiguration.registerModule("ero-placement"),ApplicationConfiguration.registerModule("ero-resource"),ApplicationConfiguration.registerModule("ero-timesheet-template"),ApplicationConfiguration.registerModule("ero-timesheet"),ApplicationConfiguration.registerModule("resource-home"),ApplicationConfiguration.registerModule("resource-project"),ApplicationConfiguration.registerModule("timesheet"),ApplicationConfiguration.registerModule("users"),angular.module("admin-home").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("admin-home",{url:"/admin/home",templateUrl:"modules/admin-home/views/home.view.client.html",needRole:"admin"})}]),angular.module("admin-home").controller("AdminHomeController",["$scope","$http",function(){}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){var init=function(){$scope.authentication=Authentication};init();var redirectToHome=function(user){var location="/";-1!==user.roles.indexOf("admin")?location="/admin/home":-1!==user.roles.indexOf("ero")?location="/ero/home":-1!==user.roles.indexOf("resource")&&(location="/resource/home"),$location.path(location)};$scope.authentication.user&&redirectToHome($scope.authentication.user),$scope.prepare=function(){$scope.credentials={email:null,password:null}},$scope.signin=function(){$scope.authenticationPromise=$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,redirectToHome($scope.authentication.user)}).error(function(response){$scope.error=response.message})}}]),angular.module("core").directive("timePicker",function(){var controller=["$scope",function($scope){var itemGenerator=function(from,to){for(var itemList=[],i=from;to>=i;i++){var item=i.toString();item.length<2&&(item="0"+i),itemList.push(item)}return itemList},deconstructTime=function(){$scope.time&&($scope.selectedJam=$scope.time.split(":")[0],$scope.selectedMenit=$scope.time.split(":")[1])},constructTime=function(){$scope.time=$scope.selectedJam&&$scope.selectedMenit?$scope.selectedJam+":"+$scope.selectedMenit:null},init=function(){$scope.daftarJam=itemGenerator(0,23),$scope.daftarMenit=itemGenerator(0,59),$scope.selectedJam=null,$scope.selectedMenit=null,deconstructTime()};init(),$scope.$watch("selectedJam",function(){constructTime()}),$scope.$watch("selectedMenit",function(){constructTime()})}],template='<select 		ng-model="selectedJam"         placeholder="Jam" 		ng-options="jam as jam for jam in daftarJam"> </select><b> : </b><select 		ng-model="selectedMenit"         placeholder="Menit" 		ng-options="menit as menit for menit in daftarMenit"> </select>';return{restrict:"E",scope:{time:"="},template:template,controller:controller}}),angular.module("core").service("DateConverterUtils",[function(){this.convertFromDateToString=function(date){var returnValue=null;if(void 0!==date&&null!==date){var year=date.getFullYear(),month=date.getMonth()+1,day=date.getDate();returnValue=year+"-"+month+"-"+day}return returnValue},this.convertFromStringToDate=function(dateAsString){var returnValue=null;if(void 0!==dateAsString&&null!==dateAsString){var year=dateAsString.split("-")[0],month=dateAsString.split("-")[1]-1,day=dateAsString.split("-")[2];returnValue=new Date(year,month,day)}return returnValue},this.todayAsString=function(){return this.convertFromDateToString(new Date)},this.todayAsDate=function(){return this.convertFromStringToDate(this.todayAsString())}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",!1,["resource","ero"])}]),angular.module("ero-client").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Client","ero/client","item","ero/client",!1,["ero"])}]),angular.module("ero-client").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("ero-client-list",{url:"/ero/client",templateUrl:"modules/ero-client/views/list-client.view.client.html",needRole:"ero"})}]),angular.module("ero-client").controller("FormClientController",["$scope","$http",function($scope,$http){var createNewClient=function(){$scope.formPromise=$http.post("api/client",$scope.client).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})},updateClient=function(){$scope.formPromise=$http.post("api/client/update",$scope.client).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})};$scope.init=function(){$scope.dialogTitle=$scope.ngDialogData.dialogTitle,void 0!==$scope.ngDialogData.client&&null!==$scope.ngDialogData.client?($scope.editMode=!0,$scope.client=$scope.ngDialogData.client):$scope.client={_id:null,name:null,external:!0}},$scope.init(),$scope.simpan=function(){$scope.editMode?updateClient():createNewClient()}}]),angular.module("ero-client").controller("EroClientListController",["$rootScope","$scope","$http","ngDialog",function($rootScope,$scope,$http,ngDialog){var retrieveClientList=function(){$scope.clientListPromise=$http({method:"GET",url:"api/client"}).success(function(clientList){$scope.clientList=clientList}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveClientList()},$scope.openTambahClientDialog=function(){ngDialog.open({template:"/modules/ero-client/views/form-client.view.client.html",controller:"FormClientController",data:JSON.stringify({dialogTitle:"Tambah Client"})})},$scope.openEditClientDialog=function(client){ngDialog.open({template:"/modules/ero-client/views/form-client.view.client.html",controller:"FormClientController",data:JSON.stringify({dialogTitle:"Edit Client",client:client})})},$rootScope.$on("ngDialog.closed",function(){retrieveClientList()})}]),angular.module("ero-home").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("ero-home",{url:"/ero/home",templateUrl:"modules/ero-home/views/home.view.client.html",needRole:"ero"})}]),angular.module("ero-home").controller("DetailPlacementOnClientController",["$scope",function($scope){var init=function(){$scope.placementData=$scope.ngDialogData.placementData,$scope.externalPlacement=$scope.ngDialogData.placementData.client.external};init()}]),angular.module("ero-home").controller("EroHomeController",["$scope","$http","ngDialog","DateConverterUtils",function($scope,$http,ngDialog,DateConverterUtils){var externalPlacementList=[],internalPlacementList=[],unknownPlacementList=[],calculateExternalPlacementPeriod=function(){for(var i=0;i<externalPlacementList.length;i++){for(var countOfOverDuePRF=0,countOfOneWeekPRF=0,countOfTwoWeekPRF=0,countOfFourWeekPRF=0,countOfMoreThanFourWeekPRF=0,oneDayInMilis=864e5,today_asDate=DateConverterUtils.todayAsDate(),nextOneWeek_asDate=new Date(today_asDate.getTime()+7*oneDayInMilis),nextTwoWeek_asDate=new Date(today_asDate.getTime()+14*oneDayInMilis),nextFourWeek_asDate=new Date(today_asDate.getTime()+28*oneDayInMilis),j=0;j<externalPlacementList[i].resourceList.length;j++){var placement_toDate_asDate=DateConverterUtils.convertFromStringToDate(externalPlacementList[i].resourceList[j].lastPlacement.toDate_asString);placement_toDate_asDate.getTime()<today_asDate.getTime()?(countOfOverDuePRF++,externalPlacementList[i].resourceList[j].markAsOverDue=!0):today_asDate.getTime()<=placement_toDate_asDate.getTime()&&placement_toDate_asDate.getTime()<nextOneWeek_asDate.getTime()?(countOfOneWeekPRF++,externalPlacementList[i].resourceList[j].markAsOneWeek=!0):nextOneWeek_asDate.getTime()<=placement_toDate_asDate.getTime()&&placement_toDate_asDate.getTime()<nextTwoWeek_asDate.getTime()?(countOfTwoWeekPRF++,externalPlacementList[i].resourceList[j].markAsTwoWeek=!0):nextTwoWeek_asDate.getTime()<=placement_toDate_asDate.getTime()&&placement_toDate_asDate.getTime()<nextFourWeek_asDate.getTime()?(countOfFourWeekPRF++,externalPlacementList[i].resourceList[j].markAsFourWeek=!0):nextFourWeek_asDate.getTime()<=placement_toDate_asDate.getTime()&&(countOfMoreThanFourWeekPRF++,externalPlacementList[i].resourceList[j].markAsMoreThantFourWeek=!0)}externalPlacementList[i].countOfOverDuePRF=countOfOverDuePRF,externalPlacementList[i].countOfOneWeekPRF=countOfOneWeekPRF,externalPlacementList[i].countOfTwoWeekPRF=countOfTwoWeekPRF,externalPlacementList[i].countOfFourWeekPRF=countOfFourWeekPRF,externalPlacementList[i].countOfMoreThanFourWeekPRF=countOfMoreThanFourWeekPRF}},findOrCreateElementOfPlacementList=function(resource,placementList){for(var i=0;i<placementList.length;i++)if(placementList[i].client._id===resource.lastPlacement.client._id)return placementList[i];var newElementOfArray={client:resource.lastPlacement.client,resourceList:[],countOfOverDuePRF:0,countOfOneWeekPRF:0,countOfTwoWeekPRF:0,countOfFourWeekPRF:0,countOfMoreThanFourWeekPRF:0};return placementList.push(newElementOfArray),newElementOfArray},calculatePlacementData=function(resourceList){for(var countOfExternalPlacement=0,countOfInternalPlacement=0,countOfUnknownPlacement=0,i=0;i<resourceList.length;i++)resourceList[i].lastPlacement&&resourceList[i].lastPlacement.client?resourceList[i].lastPlacement.client.external?(findOrCreateElementOfPlacementList(resourceList[i],externalPlacementList).resourceList.push(resourceList[i]),countOfExternalPlacement++):(findOrCreateElementOfPlacementList(resourceList[i],internalPlacementList).resourceList.push(resourceList[i]),countOfInternalPlacement++):(unknownPlacementList.push(resourceList[i]),countOfUnknownPlacement++);calculateExternalPlacementPeriod(),$scope.externalPlacementList=externalPlacementList,$scope.internalPlacementList=internalPlacementList,$scope.unknownPlacementList=unknownPlacementList,$scope.countOfExternalPlacement=countOfExternalPlacement,$scope.countOfInternalPlacement=countOfInternalPlacement,$scope.countOfUnknownPlacement=countOfUnknownPlacement,$scope.totalCountOfActiveResource=countOfExternalPlacement+countOfInternalPlacement+countOfUnknownPlacement},retrieveActiveResource=function(){$scope.activeResourcePromise=$http({method:"GET",url:"api/resource/active"}).success(function(resourceList){calculatePlacementData(resourceList)}).error(function(err){$scope.error=err.data.message})},init=function(){retrieveActiveResource(),$scope.today=DateConverterUtils.todayAsString()};init(),$scope.openDetailPlacementOnClientDialog=function(placementData){ngDialog.open({template:"/modules/ero-home/views/detail-placement-on-client.view.client.html",controller:"DetailPlacementOnClientController",data:JSON.stringify({placementData:placementData})})}}]),angular.module("ero-placement").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Placement","ero/placement","item","ero/placement",!1,["ero"])}]),angular.module("ero-placement").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("ero-placement--list-placement",{url:"/ero/placement",templateUrl:"modules/ero-placement/views/list-placement.view.client.html",needRole:"ero"}).state("ero-placement--detail-placements",{url:"/ero/placement/resource/:resourceId",templateUrl:"modules/ero-placement/views/detail-placements.view.client.html",needRole:"ero"}).state("ero-placement--performance",{url:"/ero/performance/:resourceId",templateUrl:"modules/ero-placement/views/performance.view.client.html",needRole:"ero"}).state("ero-placement--project-list",{url:"/ero/project-list/:resourceId",templateUrl:"modules/ero-placement/views/list-project.view.client.html",needRole:"ero"})}]),angular.module("ero-placement").controller("CreatePerformanceController",["$scope","$http","DateConverterUtils",function($scope,$http,DateConverterUtils){var generateMonthDataList=function(){$scope.monthDataList=[];var monthNames=["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"],today=new Date,month=today.getMonth(),year=today.getFullYear();$scope.monthDataList.push({name:year+", "+monthNames[month],year:year,month:month});for(var i=0;2>i;i++)month-=1,0>month&&(month=11,year-=1),$scope.monthDataList.push({name:year+", "+monthNames[month],year:year,month:month})},generatePilihanPenilaianUserList=function(){var pilihanPenilaianUserList=[];pilihanPenilaianUserList.push({name:"(4) Sangat Memuaskan",value:4}),pilihanPenilaianUserList.push({name:"(3) Memuaskan",value:3}),pilihanPenilaianUserList.push({name:"(2) Tidak Memuaskan",value:2}),pilihanPenilaianUserList.push({name:"(1) Sangat Tidak Memuaskan",value:1}),pilihanPenilaianUserList.push({name:"(0) Tidak ada nilai",value:0}),$scope.pilihanPenilaianUserList=pilihanPenilaianUserList},init=function(){generateMonthDataList(),generatePilihanPenilaianUserList(),$scope.aResource=$scope.ngDialogData.aResource,$scope.performance={resource:$scope.aResource._id,year:null,month:null,ski:null,collectionDate_asString:DateConverterUtils.convertFromDateToString(new Date),kompetensiPendukung:null,kedisiplinan:null,collectionDate:null,timesheetCollectionPerform:!1},$scope.collectionDate_asDate=DateConverterUtils.convertFromStringToDate($scope.performance.collectionDate_asString)};init(),$scope.simpan=function(){$scope.performance.year=$scope.selectedMonthData.year,$scope.performance.month=$scope.selectedMonthData.month,$scope.performance.ski=$scope.selectedSki.value,$scope.performance.kompetensiPendukung=$scope.selectedKompetensiPendukung.value,$scope.performance.kedisiplinan=$scope.selectedKedisiplinan.value,$scope.performance.collectionDate_asString=DateConverterUtils.convertFromDateToString($scope.collectionDate_asDate),$scope.placementPromise=$http.post("api/performance/create-penilaian-user-and-timesheet-collection",$scope.performance).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})},$scope.openCollectionDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.collectionDateOpened=!$scope.collectionDateOpened}}]),angular.module("ero-placement").controller("DetailPlacementsController",["$rootScope","$scope","$http","$stateParams","ngDialog","DateConverterUtils",function($rootScope,$scope,$http,$stateParams,ngDialog,DateConverterUtils){var searchClientWithSpecifiedId=function(clientId){for(var i=0;i<$scope.clientList.length;i++)if($scope.clientList[i]._id===clientId)return $scope.clientList[i];return null},constructClientNameForResource=function(){if(void 0!==$scope.resource.lastPlacement&&null!==$scope.resource.lastPlacement){var client=searchClientWithSpecifiedId($scope.resource.lastPlacement.client);null!==client&&($scope.resource.lastPlacement.clientName=client.name)}},retrieveResourceInfo=function(){$scope.resourcePromise=$http({method:"GET",url:"api/resource/"+$stateParams.resourceId}).success(function(resource){$scope.resource=resource,constructClientNameForResource()}).error(function(err){$scope.error=err.data.message})},retrievePlacementList=function(){$scope.placementListPromise=$http({method:"GET",url:"api/placement/resource/"+$stateParams.resourceId}).success(function(placementList){$scope.placementList=placementList;for(var i=0;i<placementList.length;i++)placementList[i].fromDateReal_asDate=DateConverterUtils.convertFromStringToDate(placementList[i].fromDateReal_asString)}).error(function(err){$scope.error=err.data.message})},retrieveClientList=function(){$scope.clientListPromise=$http({method:"GET",url:"api/client"}).success(function(clientList){$scope.clientList=clientList,retrieveResourceInfo(),retrievePlacementList()}).error(function(err){$scope.error=err.data.message})},openExternalPlacementForm=function(aPlacement){ngDialog.open({template:"/modules/ero-placement/views/external-placement.view.client.html",controller:"ExternalPlacementController",data:JSON.stringify({aResource:$scope.resource,aPlacement:aPlacement})})},openInternalPlacementForm=function(aPlacement){ngDialog.open({template:"/modules/ero-placement/views/internal-placement.view.client.html",controller:"InternalPlacementController",data:JSON.stringify({aResource:$scope.resource,aPlacement:aPlacement})})};$scope.prepare=function(){retrieveClientList()},$scope.editPlacement=function(aPlacement){aPlacement.client.external?openExternalPlacementForm(aPlacement):openInternalPlacementForm(aPlacement)},$rootScope.$on("ngDialog.closed",function(){console.log("Hello, aku di detail-placement"),retrievePlacementList()})}]),angular.module("ero-placement").controller("ExternalPlacementController",["$scope","$http","DateConverterUtils",function($scope,$http,DateConverterUtils){var retrieveExternalClient=function(){$scope.placementPromise=$http.get("api/client/external").success(function(clientList){$scope.clientList=clientList}).error(function(err){$scope.error=err.data.message})},isCreateMode=function(){return void 0===$scope.ngDialogData.aPlacement||null===$scope.ngDialogData.aPlacement},init=function(){retrieveExternalClient(),$scope.placement=isCreateMode()?{user:$scope.ngDialogData.aResource._id,prfNumber:null,fromDate_asString:DateConverterUtils.convertFromDateToString(new Date),toDate_asString:DateConverterUtils.convertFromDateToString(new Date),fromDateReal_asString:DateConverterUtils.convertFromDateToString(new Date),timesheetCollectingDate:null,client:null,placementType:"new",rumpunTechnology:null,location:null,notes:null}:{placementId:$scope.ngDialogData.aPlacement._id,user:$scope.ngDialogData.aResource._id,prfNumber:$scope.ngDialogData.aPlacement.prfNumber,fromDate_asString:$scope.ngDialogData.aPlacement.fromDate_asString,toDate_asString:$scope.ngDialogData.aPlacement.toDate_asString,fromDateReal_asString:$scope.ngDialogData.aPlacement.fromDateReal_asString,timesheetCollectingDate:$scope.ngDialogData.aPlacement.timesheetCollectingDate,client:$scope.ngDialogData.aPlacement.client._id,placementType:$scope.ngDialogData.aPlacement.placementType[0],rumpunTechnology:$scope.ngDialogData.aPlacement.rumpunTechnology[0],location:$scope.ngDialogData.aPlacement.location,notes:$scope.ngDialogData.aPlacement.notes},$scope.placementTypeList=["new","extend","replace","pay absence"],$scope.rumpunTechnologyList=["Java",".NET","PHP","Other Developer","System Engineer","Other"],$scope.fromDate_asDate=DateConverterUtils.convertFromStringToDate($scope.placement.fromDate_asString),$scope.toDate_asDate=DateConverterUtils.convertFromStringToDate($scope.placement.toDate_asString),$scope.fromDateReal_asDate=DateConverterUtils.convertFromStringToDate($scope.placement.fromDateReal_asString)};init(),$scope.simpan=function(){$scope.placement.fromDate_asString=DateConverterUtils.convertFromDateToString($scope.fromDate_asDate),$scope.placement.toDate_asString=DateConverterUtils.convertFromDateToString($scope.toDate_asDate),$scope.placement.fromDateReal_asString=DateConverterUtils.convertFromDateToString($scope.fromDateReal_asDate),$scope.placementPromise=$http.post("api/placement",$scope.placement).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})},$scope.openFromDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.fromDateOpened=!$scope.fromDateOpened},$scope.openToDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.toDateOpened=!$scope.toDateOpened},$scope.openFromDateReal=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.fromDateRealOpened=!$scope.fromDateRealOpened}}]),angular.module("ero-placement").controller("InternalPlacementController",["$scope","$http","DateConverterUtils",function($scope,$http,DateConverterUtils){var retrieveInternalClient=function(){$scope.placementPromise=$http.get("api/client/internal").success(function(clientList){$scope.clientList=clientList}).error(function(err){$scope.error=err.data.message})},isCreateMode=function(){return void 0===$scope.ngDialogData.aPlacement||null===$scope.ngDialogData.aPlacement},init=function(){retrieveInternalClient(),$scope.placement=isCreateMode()?{user:$scope.ngDialogData.aResource._id,fromDateReal_asString:DateConverterUtils.convertFromDateToString(new Date),timesheetCollectingDate:null,client:null,notes:null}:{placementId:$scope.ngDialogData.aPlacement._id,user:$scope.ngDialogData.aResource._id,fromDateReal_asString:$scope.ngDialogData.aPlacement.fromDateReal_asString,timesheetCollectingDate:$scope.ngDialogData.aPlacement.timesheetCollectingDate,client:$scope.ngDialogData.aPlacement.client._id,notes:$scope.ngDialogData.aPlacement.notes},$scope.fromDateReal_asDate=DateConverterUtils.convertFromStringToDate($scope.placement.fromDateReal_asString)};init(),$scope.simpan=function(){$scope.placement.fromDateReal_asString=DateConverterUtils.convertFromDateToString($scope.fromDateReal_asDate),$scope.placementPromise=$http.post("api/placement",$scope.placement).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})},$scope.openFromDateReal=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.fromDateRealOpened=!$scope.fromDateRealOpened}}]),angular.module("ero-placement").controller("EroPlacementListController",["$rootScope","$scope","$http","$location","ngDialog",function($rootScope,$scope,$http,$location,ngDialog){var findClientWithSpecifiedId=function(id){for(var i=0;i<$scope.clientList.length;i++)if($scope.clientList[i]._id===id)return $scope.clientList[i]},matchLastPlacementWithClient=function(){for(var i=0;i<$scope.resourceList.length;i++)void 0!==$scope.resourceList[i].lastPlacement&&null!==$scope.resourceList[i].lastPlacement&&($scope.resourceList[i].lastPlacement.clientName=findClientWithSpecifiedId($scope.resourceList[i].lastPlacement.client).name)},retrieveClientList=function(){$scope.placementListPromise=$http({method:"GET",url:"api/client"}).success(function(clientList){$scope.clientList=clientList,matchLastPlacementWithClient()}).error(function(err){$scope.error=err.data.message})},retrieveResourceList=function(){$scope.placementListPromise=$http({method:"GET",url:"api/resource"}).success(function(resourceList){$scope.resourceList=resourceList,retrieveClientList()}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveResourceList()},$scope.detailPlacements=function(aResource){$location.url("/ero/placement/resource/"+aResource._id)},$scope.timesheet=function(aResource){$location.url("/ero/timesheet/"+aResource._id)},$scope.performance=function(aResource){$location.url("/ero/performance/"+aResource._id)},$scope.projectList=function(aResource){$location.url("/ero/project-list/"+aResource._id)},$scope.newExternalPlacement=function(aResource){ngDialog.open({template:"/modules/ero-placement/views/external-placement.view.client.html",controller:"ExternalPlacementController",data:JSON.stringify({aResource:aResource})})},$scope.newInternalPlacement=function(aResource){ngDialog.open({template:"/modules/ero-placement/views/internal-placement.view.client.html",controller:"InternalPlacementController",data:JSON.stringify({aResource:aResource})})},$scope.timesheetCollection=function(aResource){ngDialog.open({template:"/modules/ero-placement/views/create-performance-for-penilaian-user-and-timesheet-collection.view.client.html",controller:"CreatePerformanceController",data:JSON.stringify({aResource:aResource})})},$rootScope.$on("ngDialog.closed",function(){retrieveResourceList()})}]),angular.module("ero-placement").controller("ProjectListController",["$rootScope","$scope","$http","$stateParams","ngDialog","DateConverterUtils",function($rootScope,$scope,$http,$stateParams){var searchClientWithSpecifiedId=function(clientId){for(var i=0;i<$scope.clientList.length;i++)if($scope.clientList[i]._id===clientId)return $scope.clientList[i];return null},constructClientNameForResource=function(){if(void 0!==$scope.resource.lastPlacement&&null!==$scope.resource.lastPlacement){var client=searchClientWithSpecifiedId($scope.resource.lastPlacement.client);null!==client&&($scope.resource.lastPlacement.clientName=client.name)}},retrieveResourceInfo=function(){$scope.resourcePromise=$http({method:"GET",url:"api/resource/"+$stateParams.resourceId}).success(function(resource){$scope.resource=resource,constructClientNameForResource()}).error(function(err){$scope.error=err.data.message})},retrieveProjectList=function(){$scope.projectListPromise=$http({method:"GET",url:"api/project/"+$stateParams.resourceId+"/retrieve"}).success(function(projectList){$scope.projectList=projectList}).error(function(err){$scope.error=err.data.message})},retrieveClientList=function(){$scope.clientListPromise=$http({method:"GET",url:"api/client"}).success(function(clientList){$scope.clientList=clientList,retrieveResourceInfo(),retrieveProjectList()}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveClientList()}}]),angular.module("ero-placement").controller("PerformanceController",["$rootScope","$scope","$http","$stateParams","ngDialog",function($rootScope,$scope,$http,$stateParams,ngDialog){var calculateTotalPerformance=function(){for(var totalAbsensi=0,totalBillable=0,totalTimesheetCollection=0,totalPenilaianUser=0,grandTotal=0,i=0;i<$scope.performanceList.length;i++){var aPerformance=$scope.performanceList[i];aPerformance.kriteriaPenilaianUser&&aPerformance.kriteriaPenilaianUser.kriteriaValue&&(totalPenilaianUser+=aPerformance.kriteriaPenilaianUser.kriteriaValue),aPerformance.kriteriaTimesheetCollection&&aPerformance.kriteriaTimesheetCollection.kriteriaValue&&(totalTimesheetCollection+=aPerformance.kriteriaTimesheetCollection.kriteriaValue),aPerformance.kriteriaAbsensi&&aPerformance.kriteriaAbsensi.kriteriaValue&&(totalAbsensi+=aPerformance.kriteriaAbsensi.kriteriaValue),aPerformance.kriteriaBillableUtilization&&aPerformance.kriteriaBillableUtilization.kriteriaValue&&(totalBillable+=aPerformance.kriteriaBillableUtilization.kriteriaValue),aPerformance.totalValue&&(grandTotal+=aPerformance.totalValue)}$scope.totalAbsensi=totalAbsensi,$scope.totalBillable=totalBillable,$scope.totalTimesheetCollection=totalTimesheetCollection,$scope.totalPenilaianUser=totalPenilaianUser,$scope.grandTotal=grandTotal},retrieveResourceData=function(){$scope.resourcePromise=$http({method:"GET",url:"api/resource/"+$stateParams.resourceId}).success(function(resource){$scope.resource=resource}).error(function(err){$scope.error=err.data.message})},retrievePerformanceData=function(){$scope.performancePromise=$http({method:"GET",url:"api/performance/"+$stateParams.resourceId+"/retrieve",params:{year:$scope.currentYear}}).success(function(result){$scope.performanceList=result.performanceList,$scope.year=result.year,calculateTotalPerformance()}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveResourceData(),retrievePerformanceData()},$scope.openDetailAbsensi=function(){ngDialog.open({template:"detailAbsensiDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalAbsensi:$scope.totalAbsensi})})},$scope.openDetailBillable=function(){ngDialog.open({template:"detailBillableDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalBillable:$scope.totalBillable})})
},$scope.openDetailTimesheetCollection=function(){ngDialog.open({template:"detailTimesheetCollectionDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalTimesheetCollection:$scope.totalTimesheetCollection})})},$scope.openDetailPenilaianUser=function(){ngDialog.open({template:"detailPenilaianUserDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalPenilaianUser:$scope.totalPenilaianUser})})},$scope.openDetailPerformance=function(){ngDialog.open({template:"detailPerformanceDialog",controller:["$scope",function($scope){$scope.updatePerformanceForPenilaianUser=function(aPerformance){ngDialog.open({template:"/modules/ero-placement/views/update-performance-for-penilaian-user-and-timesheet-collection.view.client.html",controller:"UpdatePerformanceController",data:JSON.stringify({aPerformance:aPerformance})})}}],data:JSON.stringify({performanceList:$scope.performanceList,grandTotal:$scope.grandTotal})})}}]),angular.module("ero-placement").controller("UpdatePerformanceController",["$window","$scope","$http","DateConverterUtils",function($window,$scope,$http,DateConverterUtils){var generatePilihanPenilaianUserList=function(){var pilihanPenilaianUserList=[];pilihanPenilaianUserList.push({name:"(4) Sangat Memuaskan",value:4}),pilihanPenilaianUserList.push({name:"(3) Memuaskan",value:3}),pilihanPenilaianUserList.push({name:"(2) Tidak Memuaskan",value:2}),pilihanPenilaianUserList.push({name:"(1) Sangat Tidak Memuaskan",value:1}),pilihanPenilaianUserList.push({name:"(0) Tidak ada nilai",value:0}),$scope.pilihanPenilaianUserList=pilihanPenilaianUserList},init=function(){generatePilihanPenilaianUserList(),$scope.performance=$scope.ngDialogData.aPerformance};init(),$scope.simpan=function(){console.log("simpan"),$scope.performance.ski=$scope.selectedSki.value,$scope.performance.kompetensiPendukung=$scope.selectedKompetensiPendukung.value,$scope.performance.kedisiplinan=$scope.selectedKedisiplinan.value;var performance={performanceId:$scope.performance._id,ski:$scope.selectedSki.value,kompetensiPendukung:$scope.selectedKompetensiPendukung.value,kedisiplinan:$scope.selectedKedisiplinan.value,collectionDate_asString:DateConverterUtils.convertFromDateToString($scope.collectionDate_asDate),timesheetCollectionPerform:$scope.timesheetCollectionPerform};console.log("performance: "+performance),$scope.placementPromise=$http.post("api/performance/update-penilaian-user-and-timesheet-collection",performance).success(function(){$window.location.reload()}).error(function(err){$scope.error=err.data.message})},$scope.openCollectionDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.collectionDateOpened=!$scope.collectionDateOpened}}]),angular.module("ero-resource").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Resource","ero/resource","item","ero/resource",!1,["ero"])}]),angular.module("ero-resource").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("ero-resource-list",{url:"/ero/resource",templateUrl:"modules/ero-resource/views/list-resource.view.client.html",needRole:"ero"})}]),angular.module("ero-resource").controller("ChangePasswordResourceController",["$scope","$http",function($scope,$http){var init=function(){$scope.resource=$scope.ngDialogData.resource,$scope.passwordDetails={userId:$scope.resource._id,newPassword:null}};init(),$scope.simpan=function(){$scope.formPromise=$http.post("api/resource/change-password",$scope.passwordDetails).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})}}]),angular.module("ero-resource").controller("FormResourceController",["$scope","$http","DateConverterUtils",function($scope,$http,DateConverterUtils){var createNewResource=function(){$scope.formPromise=$http.post("api/resource",$scope.resource).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})},updateResource=function(){$scope.formPromise=$http.post("api/resource/update",$scope.resource).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})};$scope.init=function(){$scope.dialogTitle=$scope.ngDialogData.dialogTitle,void 0!==$scope.ngDialogData.resource&&null!==$scope.ngDialogData.resource?($scope.editMode=!0,$scope.resource=$scope.ngDialogData.resource):$scope.resource={_id:null,name:null,nip:null,email:null,password:null,joinDate_asString:DateConverterUtils.convertFromDateToString(new Date)},$scope.resource.aktif=!0,$scope.joinDate_asDate=DateConverterUtils.convertFromStringToDate($scope.resource.joinDate_asString),$scope.resource.statusKepegawaian&&"resign"===$scope.resource.statusKepegawaian[0]&&($scope.resource.aktif=!1)},$scope.init(),$scope.simpan=function(){$scope.resource.joinDate_asString=DateConverterUtils.convertFromDateToString($scope.joinDate_asDate),$scope.resource.statusKepegawaian=$scope.resource.aktif?["active"]:["resign"],$scope.editMode?updateResource():createNewResource()},$scope.openJoinDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!$scope.opened}}]),angular.module("ero-resource").controller("EroResourceListController",["$rootScope","$scope","$http","ngDialog",function($rootScope,$scope,$http,ngDialog){var retrieveResourceList=function(){$scope.resourceListPromise=$http({method:"GET",url:"api/resource"}).success(function(resourceList){$scope.resourceList=resourceList}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveResourceList()},$scope.openTambahResourceDialog=function(){ngDialog.open({template:"/modules/ero-resource/views/form-resource.view.client.html",controller:"FormResourceController",data:JSON.stringify({dialogTitle:"Tambah Resource"})})},$scope.openEditResourceDialog=function(resource){ngDialog.open({template:"/modules/ero-resource/views/form-resource.view.client.html",controller:"FormResourceController",data:JSON.stringify({dialogTitle:"Edit Resource",resource:resource})})},$scope.openChangePasswordResourceDialog=function(resource){ngDialog.open({template:"/modules/ero-resource/views/change-password.view.client.html",controller:"ChangePasswordResourceController",data:JSON.stringify({resource:resource})})},$rootScope.$on("ngDialog.closed",function(){retrieveResourceList()})}]),angular.module("ero-timesheet-template").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Timesheet Template","ero/timesheet-template","item","ero/timesheet-template",!1,["ero"])}]),angular.module("ero-timesheet-template").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("ero-timesheet-template",{url:"/ero/timesheet-template",templateUrl:"modules/ero-timesheet-template/views/list-timesheet-template.view.client.html",needRole:"ero"})}]),angular.module("ero-timesheet-template").controller("EroTimesheetTemplateListController",["$scope","$http",function($scope,$http){var retrieveYearList=function(){$scope.yearListPromise=$http({method:"GET",url:"api/timesheet-template/retrieve-years"}).success(function(yearList){$scope.yearList=yearList,selectYear()}).error(function(err){$scope.error=err.data.message})},selectYear=function(){$scope.selectedYear=null;for(var i=0;i<$scope.yearList.length;i++)$scope.yearList[i].currentYear&&($scope.selectedYear=$scope.yearList[i])},retrieveTimesheetTempateById=function(id){$scope.timesheetTemplatePromise=$http({method:"GET",url:"api/timesheet-template/"+id}).success(function(timesheetTemplate){$scope.timesheetTemplate=timesheetTemplate}).error(function(err){$scope.error=err.data.message})},initiateStatusList=function(){$scope.statusList=["Masuk","Libur","Cuti"]};$scope.prepare=function(){initiateStatusList(),retrieveYearList()},$scope.updateTimesheetTemplate=function(){$scope.timesheetTemplatePromise=$http.post("api/timesheet-template/",$scope.timesheetTemplate).success(function(){retrieveTimesheetTempateById($scope.timesheetTemplate._id)}).error(function(err){$scope.error=err.data.message})},$scope.$watch("selectedYear",function(){if(void 0!==$scope.selectedYear&&null!==$scope.selectedYear){var id=$scope.selectedYear._id;retrieveTimesheetTempateById(id)}},!0)}]),angular.module("ero-timesheet").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("ero-timesheet",{url:"/ero/timesheet/:resourceId",templateUrl:"modules/ero-timesheet/views/list-timesheet.view.client.html",needRole:"ero"})}]),angular.module("ero-timesheet").controller("EroDetailTimesheetController",["$scope",function($scope){var init=function(){$scope.timesheet=$scope.ngDialogData.timesheet};init()}]),angular.module("ero-timesheet").controller("EroFormTimesheetController",["$scope","$http","$stateParams","DateConverterUtils",function($scope,$http,$stateParams,DateConverterUtils){var onboardDateTimeline=[],orderPlacementListByDate=function(placementList){placementList.sort(function(placement1,placement2){var placement1_fromDateReal_asDate=DateConverterUtils.convertFromStringToDate(placement1.fromDateReal_asString),placement2_fromDateReal_asDate=DateConverterUtils.convertFromStringToDate(placement2.fromDateReal_asString);return placement1_fromDateReal_asDate.getTime()-placement2_fromDateReal_asDate.getTime()})},generateOnboardDateTimeline=function(placementList){if(orderPlacementListByDate(placementList),placementList.length>0){for(var i=0;i<placementList.length;i++)onboardDateTimeline.push({onboardDate:DateConverterUtils.convertFromStringToDate(placementList[i].fromDateReal_asString),placementData:placementList[i]});onboardDateTimeline.push(placementList[placementList.length-1].client.external?{onboardDate:DateConverterUtils.convertFromStringToDate(placementList[placementList.length-1].toDate_asString),placementData:placementList[placementList.length-1]}:{onboardDate:new Date,placementData:placementList[placementList.length-1]}),onboardDateTimeline[onboardDateTimeline.length-1].onboardDate=new Date(onboardDateTimeline[onboardDateTimeline.length-1].onboardDate.getTime()+1)}},matchingPlacementData=function(){$scope.matchedPlacement=null;for(var tanggalTimesheet=$scope.tanggal_asDate,i=0;i<onboardDateTimeline.length-1;i++)if(onboardDateTimeline[i].onboardDate.getTime()<=tanggalTimesheet.getTime()&&tanggalTimesheet.getTime()<onboardDateTimeline[i+1].onboardDate.getTime())return void($scope.matchedPlacement=onboardDateTimeline[i].placementData)},updateTimesheet=function(){"Masuk"!==$scope.timesheet.statusAbsensi&&($scope.timesheet.jamKerjaMulai=null,$scope.timesheet.jamKerjaSelesai=null,$scope.timesheet.jamOTMulai=null,$scope.timesheet.jamOTSelesai=null),$scope.formPromise=$http.post("api/timesheet/"+$stateParams.resourceId+"/update",$scope.timesheet).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})};$scope.init=function(){$scope.placementList=$scope.ngDialogData.placementList,generateOnboardDateTimeline($scope.placementList),$scope.timesheet=$scope.ngDialogData.timesheet,$scope.tanggal_asDate=DateConverterUtils.convertFromStringToDate($scope.timesheet.tanggal_asString)},$scope.init(),$scope.simpan=function(){null!==$scope.matchedPlacement&&($scope.timesheet.placement=$scope.matchedPlacement._id,updateTimesheet())},$scope.$watch("tanggal_asDate",function(){null!==$scope.placementList&&void 0!==$scope.placementList&&matchingPlacementData()},!0)}]),angular.module("ero-timesheet").controller("EroTimesheetListController",["$rootScope","$scope","$http","$stateParams","$location","ngDialog","DateConverterUtils",function($rootScope,$scope,$http,$stateParams,$location,ngDialog,DateConverterUtils){var generateMonthDataList=function(){$scope.monthDataList=[];var monthNames=["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"],today=new Date,month=today.getMonth(),year=today.getFullYear();$scope.monthDataList.push({name:year+", "+monthNames[month],year:year,month:month});for(var i=0;23>i;i++)month-=1,0>month&&(month=11,year-=1),$scope.monthDataList.push({name:year+", "+monthNames[month],year:year,month:month})},findPlacementForSpecifiedId=function(placementList,id){for(var i=0;i<placementList.length;i++)if(placementList[i]._id===id)return placementList[i];return null},isTimesheetEditable=function(){return!0},matchingTimesheetWithPlacement=function(timesheetList,placementList){for(var i=0;i<timesheetList.length;i++)timesheetList[i].placement=findPlacementForSpecifiedId(placementList,timesheetList[i].placement),timesheetList[i].editable=isTimesheetEditable(timesheetList[i].tanggal_asDate)},retrieveInitData=function(){$scope.timesheetListPromise=$http({method:"GET",url:"api/placement/resource/"+$stateParams.resourceId}).success(function(placementList){$scope.placementList=placementList,generateMonthDataList(),$scope.selectedMonthData=$scope.monthDataList[0]}).error(function(err){$scope.error=err.data.message})},retrieveTimesheetByMonth=function(year,month){$scope.timesheetListPromise=$http({method:"GET",url:"api/timesheet/"+$stateParams.resourceId+"/retrieve-by-month/",params:{year:year,month:month}}).success(function(timesheetList){for(var i=0;i<timesheetList.length;i++)timesheetList[i].tanggal_asDate=DateConverterUtils.convertFromStringToDate(timesheetList[i].tanggal_asString);matchingTimesheetWithPlacement(timesheetList,$scope.placementList),$scope.timesheetList=timesheetList}).error(function(err){$scope.error=err.data.message})},retrieveTimesheet=function(){void 0!==$scope.selectedMonthData&&null!==$scope.selectedMonthData&&retrieveTimesheetByMonth($scope.selectedMonthData.year,$scope.selectedMonthData.month)},retrieveResourceData=function(){$scope.resourcePromise=$http({method:"GET",url:"api/resource/"+$stateParams.resourceId}).success(function(resource){$scope.resource=resource}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveInitData(),retrieveResourceData()},$scope.openEditTimesheetDialog=function(timesheet){ngDialog.open({template:"/modules/ero-timesheet/views/form-timesheet.view.client.html",controller:"EroFormTimesheetController",data:JSON.stringify({placementList:$scope.placementList,timesheet:timesheet})})},$scope.openDetailTimesheetDialog=function(timesheet){ngDialog.open({template:"/modules/ero-timesheet/views/detail-timesheet.view.client.html",controller:"EroDetailTimesheetController",data:JSON.stringify({timesheet:timesheet})})},$scope.openPrintTimesheetDialog=function(){ngDialog.open({template:"/modules/ero-timesheet/views/print-timesheet.view.client.html",controller:"EroPrintTimesheetController"})},$rootScope.$on("ngDialog.closed",function(){retrieveTimesheet()}),$scope.$watch("selectedMonthData",function(){retrieveTimesheet()},!0)}]),angular.module("ero-timesheet").controller("EroPrintTimesheetController",["$scope","$stateParams","DateConverterUtils",function($scope,$stateParams,DateConverterUtils){var init=function(){$scope.startDate_asDate=DateConverterUtils.todayAsDate(),$scope.endDate_asDate=DateConverterUtils.todayAsDate()};init(),$scope.openStartDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.startDateOpened=!$scope.startDateOpened},$scope.openEndDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.endDateOpened=!$scope.endDateOpened},$scope.printTimesheet=function(){var startDate_asString=DateConverterUtils.convertFromDateToString($scope.startDate_asDate),endDate_asString=DateConverterUtils.convertFromDateToString($scope.endDate_asDate),timesheetUrl="/api/timesheet/"+$stateParams.resourceId+"/retrieve-pdf/"+startDate_asString+"/"+endDate_asString;window.open(timesheetUrl,"_blank"),$scope.closeThisDialog()}}]),angular.module("timesheet").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("resource-home",{url:"/resource/home",templateUrl:"modules/resource-home/views/home.view.client.html",needRole:"resource"})}]),angular.module("timesheet").controller("ResourceHomeController",["$scope","$http","ngDialog",function($scope,$http,ngDialog){var calculateTotalPerformance=function(){for(var totalAbsensi=0,totalBillable=0,totalTimesheetCollection=0,totalPenilaianUser=0,grandTotal=0,i=0;i<$scope.performanceList.length;i++){var aPerformance=$scope.performanceList[i];aPerformance.kriteriaPenilaianUser&&aPerformance.kriteriaPenilaianUser.kriteriaValue&&(totalPenilaianUser+=aPerformance.kriteriaPenilaianUser.kriteriaValue),aPerformance.kriteriaTimesheetCollection&&aPerformance.kriteriaTimesheetCollection.kriteriaValue&&(totalTimesheetCollection+=aPerformance.kriteriaTimesheetCollection.kriteriaValue),aPerformance.kriteriaAbsensi&&aPerformance.kriteriaAbsensi.kriteriaValue&&(totalAbsensi+=aPerformance.kriteriaAbsensi.kriteriaValue),aPerformance.kriteriaBillableUtilization&&aPerformance.kriteriaBillableUtilization.kriteriaValue&&(totalBillable+=aPerformance.kriteriaBillableUtilization.kriteriaValue),aPerformance.totalValue&&(grandTotal+=aPerformance.totalValue)}$scope.totalAbsensi=totalAbsensi,$scope.totalBillable=totalBillable,$scope.totalTimesheetCollection=totalTimesheetCollection,$scope.totalPenilaianUser=totalPenilaianUser,$scope.grandTotal=grandTotal},init=function(){$scope.performancePromise=$http({method:"GET",url:"api/performance/retrieve"}).success(function(result){$scope.performanceList=result.performanceList,$scope.year=result.year,calculateTotalPerformance()}).error(function(err){$scope.error=err.data.message})};init(),$scope.openDetailAbsensi=function(){ngDialog.open({template:"detailAbsensiDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalAbsensi:$scope.totalAbsensi})})},$scope.openDetailBillable=function(){ngDialog.open({template:"detailBillableDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalBillable:$scope.totalBillable})})},$scope.openDetailTimesheetCollection=function(){ngDialog.open({template:"detailTimesheetCollectionDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalTimesheetCollection:$scope.totalTimesheetCollection})})},$scope.openDetailPenilaianUser=function(){ngDialog.open({template:"detailPenilaianUserDialog",data:JSON.stringify({performanceList:$scope.performanceList,totalPenilaianUser:$scope.totalPenilaianUser})})},$scope.openDetailPerformance=function(){ngDialog.open({template:"detailPerformanceDialog",data:JSON.stringify({performanceList:$scope.performanceList,grandTotal:$scope.grandTotal})})}}]),angular.module("resource-project").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Project","resource/project","item","resource/project",!1,["resource"])}]),angular.module("resource-project").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("resource-project-list",{url:"/resource/project",templateUrl:"modules/resource-project/views/list.project.view.client.html",needRole:"resource"})}]),angular.module("resource-project").controller("FormProjectController",["$scope","$http",function($scope,$http){var createNewProject=function(){$scope.formPromise=$http.post("api/project/create",$scope.project).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})},updateProject=function(){$scope.formPromise=$http.post("api/project/update",$scope.project).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})};$scope.init=function(){$scope.dialogTitle=$scope.ngDialogData.dialogTitle,void 0!==$scope.ngDialogData.project&&null!==$scope.ngDialogData.project?($scope.editMode=!0,$scope.project=$scope.ngDialogData.project):$scope.project={_id:null,clientName:null,location:null,departmentName:null,userName:null,projectName:null,startProject:null,endProject:null,role:null,projectPhase:null,projectDescription:null,projectTechnology:null,mainTask:null}},$scope.init(),$scope.simpan=function(){$scope.editMode?updateProject():createNewProject()}}]),angular.module("resource-project").controller("ResourceProjectListController",["$rootScope","$scope","$http","ngDialog",function($rootScope,$scope,$http,ngDialog){var retrieveProjectList=function(){$scope.projectListPromise=$http({method:"GET",url:"api/project/retrieve"}).success(function(projectList){$scope.projectList=projectList}).error(function(err){$scope.error=err.data.message})};$scope.prepare=function(){retrieveProjectList()},$scope.openTambahProjectDialog=function(){ngDialog.open({template:"/modules/resource-project/views/form.project.view.client.html",controller:"FormProjectController",data:JSON.stringify({dialogTitle:"Tambah Project"})})},$scope.openEditProjectDialog=function(project){ngDialog.open({template:"/modules/resource-project/views/form.project.view.client.html",controller:"FormProjectController",data:JSON.stringify({dialogTitle:"Edit Project",project:project})})},$scope.deleteProject=function(project){$http({method:"POST",url:"api/project/"+project._id+"/delete"}).success(function(){retrieveProjectList()}).error(function(err){$scope.error=err.data.message})},$rootScope.$on("ngDialog.closed",function(){retrieveProjectList()})}]),angular.module("timesheet").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Timesheet","resource/timesheet","item","resource/timesheet",!1,["resource"])}]),angular.module("timesheet").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("timesheet",{url:"/resource/timesheet",templateUrl:"modules/resource-timesheet/views/list-timesheet.view.client.html",needRole:"resource"})}]),angular.module("timesheet").controller("DetailTimesheetController",["$scope",function($scope){var init=function(){$scope.timesheet=$scope.ngDialogData.timesheet};init()}]),angular.module("timesheet").controller("FormTimesheetController",["$scope","$http","DateConverterUtils",function($scope,$http,DateConverterUtils){var onboardDateTimeline=[],orderPlacementListByDate=function(placementList){placementList.sort(function(placement1,placement2){var placement1_fromDateReal_asDate=DateConverterUtils.convertFromStringToDate(placement1.fromDateReal_asString),placement2_fromDateReal_asDate=DateConverterUtils.convertFromStringToDate(placement2.fromDateReal_asString);return placement1_fromDateReal_asDate.getTime()-placement2_fromDateReal_asDate.getTime()})},generateOnboardDateTimeline=function(placementList){if(orderPlacementListByDate(placementList),placementList.length>0){for(var i=0;i<placementList.length;i++)onboardDateTimeline.push({onboardDate:DateConverterUtils.convertFromStringToDate(placementList[i].fromDateReal_asString),placementData:placementList[i]});onboardDateTimeline.push(placementList[placementList.length-1].client.external?{onboardDate:DateConverterUtils.convertFromStringToDate(placementList[placementList.length-1].toDate_asString),placementData:placementList[placementList.length-1]}:{onboardDate:new Date,placementData:placementList[placementList.length-1]}),onboardDateTimeline[onboardDateTimeline.length-1].onboardDate=new Date(onboardDateTimeline[onboardDateTimeline.length-1].onboardDate.getTime()+1)}},matchingPlacementData=function(){$scope.matchedPlacement=null;for(var tanggalTimesheet=$scope.tanggal_asDate,i=0;i<onboardDateTimeline.length-1;i++)if(onboardDateTimeline[i].onboardDate.getTime()<=tanggalTimesheet.getTime()&&tanggalTimesheet.getTime()<onboardDateTimeline[i+1].onboardDate.getTime())return void($scope.matchedPlacement=onboardDateTimeline[i].placementData)},updateTimesheet=function(){"Masuk"!==$scope.timesheet.statusAbsensi&&($scope.timesheet.jamKerjaMulai=null,$scope.timesheet.jamKerjaSelesai=null,$scope.timesheet.jamOTMulai=null,$scope.timesheet.jamOTSelesai=null),$scope.formPromise=$http.post("api/timesheet/update",$scope.timesheet).success(function(){$scope.closeThisDialog()}).error(function(err){$scope.error=err.data.message})};$scope.init=function(){$scope.placementList=$scope.ngDialogData.placementList,generateOnboardDateTimeline($scope.placementList),$scope.timesheet=$scope.ngDialogData.timesheet,$scope.tanggal_asDate=DateConverterUtils.convertFromStringToDate($scope.timesheet.tanggal_asString)},$scope.init(),$scope.simpan=function(){null!==$scope.matchedPlacement&&($scope.timesheet.placement=$scope.matchedPlacement._id,updateTimesheet())},$scope.$watch("tanggal_asDate",function(){null!==$scope.placementList&&void 0!==$scope.placementList&&matchingPlacementData()},!0)}]),angular.module("timesheet").controller("TimesheetListController",["$rootScope","$scope","$http","$location","ngDialog","DateConverterUtils",function($rootScope,$scope,$http,$location,ngDialog,DateConverterUtils){var generateMonthDataList=function(){$scope.monthDataList=[];var monthNames=["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"],today=new Date,month=today.getMonth(),year=today.getFullYear();$scope.monthDataList.push({name:year+", "+monthNames[month],year:year,month:month});for(var i=0;23>i;i++)month-=1,0>month&&(month=11,year-=1),$scope.monthDataList.push({name:year+", "+monthNames[month],year:year,month:month})},findPlacementForSpecifiedId=function(placementList,id){for(var i=0;i<placementList.length;i++)if(placementList[i]._id===id)return placementList[i];return null},isTimesheetEditable=function(tanggalTimesheet){var tanggalTimesheetAsDate=new Date(tanggalTimesheet),currentAsDate=new Date,aWeekAgoAsDate=new Date;return aWeekAgoAsDate.setDate(currentAsDate.getDate()-7),tanggalTimesheetAsDate>=aWeekAgoAsDate&&currentAsDate>=tanggalTimesheetAsDate},matchingTimesheetWithPlacement=function(timesheetList,placementList){for(var i=0;i<timesheetList.length;i++)timesheetList[i].placement=findPlacementForSpecifiedId(placementList,timesheetList[i].placement),timesheetList[i].editable=isTimesheetEditable(timesheetList[i].tanggal_asDate)},retrieveInitData=function(){$scope.timesheetListPromise=$http({method:"GET",url:"api/placement"}).success(function(placementList){$scope.placementList=placementList,generateMonthDataList(),$scope.selectedMonthData=$scope.monthDataList[0]}).error(function(err){$scope.error=err.data.message})},retrieveTimesheetByMonth=function(year,month){$scope.timesheetListPromise=$http({method:"GET",url:"api/timesheet/retrieve-by-month/",params:{year:year,month:month}}).success(function(timesheetList){for(var i=0;i<timesheetList.length;i++)timesheetList[i].tanggal_asDate=DateConverterUtils.convertFromStringToDate(timesheetList[i].tanggal_asString);matchingTimesheetWithPlacement(timesheetList,$scope.placementList),$scope.timesheetList=timesheetList}).error(function(err){$scope.error=err.data.message})},retrieveTimesheet=function(){void 0!==$scope.selectedMonthData&&null!==$scope.selectedMonthData&&retrieveTimesheetByMonth($scope.selectedMonthData.year,$scope.selectedMonthData.month)};$scope.prepare=function(){retrieveInitData()},$scope.openEditTimesheetDialog=function(timesheet){ngDialog.open({template:"/modules/resource-timesheet/views/form-timesheet.view.client.html",controller:"FormTimesheetController",data:JSON.stringify({placementList:$scope.placementList,timesheet:timesheet})})},$scope.openDetailTimesheetDialog=function(timesheet){ngDialog.open({template:"/modules/resource-timesheet/views/detail-timesheet.view.client.html",controller:"DetailTimesheetController",data:JSON.stringify({timesheet:timesheet})})},$scope.openPrintTimesheetDialog=function(){ngDialog.open({template:"/modules/resource-timesheet/views/print-timesheet.view.client.html",controller:"PrintTimesheetController"})},$rootScope.$on("ngDialog.closed",function(){retrieveTimesheet()}),$scope.$watch("selectedMonthData",function(){retrieveTimesheet()},!0)}]),angular.module("timesheet").controller("PrintTimesheetController",["$scope","DateConverterUtils",function($scope,DateConverterUtils){var init=function(){$scope.startDate_asDate=DateConverterUtils.todayAsDate(),$scope.endDate_asDate=DateConverterUtils.todayAsDate()};init(),$scope.openStartDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.startDateOpened=!$scope.startDateOpened},$scope.openEndDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.endDateOpened=!$scope.endDateOpened},$scope.printTimesheet=function(){var startDate_asString=DateConverterUtils.convertFromDateToString($scope.startDate_asDate),endDate_asString=DateConverterUtils.convertFromDateToString($scope.endDate_asDate),timesheetUrl="/api/timesheet/retrieve-pdf/"+startDate_asString+"/"+endDate_asString;window.open(timesheetUrl,"_blank"),$scope.closeThisDialog()}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.view.client.html",needRole:"mustBeNotLogged"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/change-password.view.client.html",needRole:"mustBeLogged"})}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.changeUserPassword=function(isValid){$scope.success=!1,$scope.passwordDetails.newPassword!==$scope.passwordDetails.verifyPassword?(isValid=!1,$scope.notMatchPassword=!0):$scope.notMatchPassword=!1,isValid&&($scope.success=$scope.error=null,$scope.settingsPromise=$http.post("/api/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null,$scope.changePasswordForm.$setPristine()}).error(function(response){$scope.error=response.message}))}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);